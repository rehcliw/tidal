-- PREREQUIREMENT
-- First you should execute the following tidal code:
linput = pI "linput"
lname = pS "lname"
-- Now you can use linput and lname as parameter.

{- HOW TO USE IT
  This basic operations which are explained below is shared by all looper modes.
  By default 8 buffers are created, and accessible under the name 'loop' (s)
  and a number from 0 .. 7 (n).
-}
-- The simplest form for recording is
once $ s "looper"

-- After recording you can listen back to the result with
d1 $ s "loop"

-- It is possible to set the length of the recording
-- (this is equals to the length of the events) i.e
d1 $ slow 0.5 $ s "loop"

-- Use n to choose a specific buffer,
-- i.e. n "2" is equal to "write to the second buffer under of the sample bank loop".
d1 $ s "looper" # n "<0 1 2 3 4 5 6 7>"

d1 silence

-- And each buffer is accessible with the n function
d2
$ fast 8
$ n "<0 1 2 3 4 5 6 7>"
# s "loop"
# shape 0.6
# gain 1.5


d2
-- $ fast "1%2"
$ juxBy 0.5 rev
-- $ fast "{2 1%4 1%2 4}%2"
-- $ chunk 4 (hurry "<2 4 1>")
-- $ repeatCycles 4
-- $ every 2 (striateBy 16 0.05)
-- $ degradeBy 0.9
-- $ stutWith "{1 2 4 3}%3" "{0 2 1}%2" ((|* speed "{1.05 0.55 2.05 0.255 1}%2"))
-- $ splice 8 "0 1 2 3 7 3 0 5 24 1 7"
$ n "{0 1 2 3 4 <0 1 2 3 4 5 6 7> 5 6 7}%4"
# s "<loop>"
-- # speed 1.2
-- # speed "{1%2 2 -1 -1%4 4}%4"
-- # shape 0.6
-- # coarse "{1 4 1}%5"
-- # squiz 2
-- # leslie 0.5
-- # lrate 4.7
-- # lsize 3
-- # distort "{0 0.7 0}%4"
-- # comb 0.4
-- # lpf 3500
-- # lpq 0.4
# gain 1.5
-- # room 0.2
-- # sz 0.8
# legato 2
-- # linput 2
-- # legato "0.01 4 0.01 2"
-- # legato "{1 0.5 1.5}%4"

-- You can use each input port for recording.
-- If you use i.e. Blackhole, than the output and input ports have the same results.
-- This way you can write the orbit results (i.e. what came from d1) to a buffer.
d1 $ s "looper" # linput 1

-- You can specifiy the name of your loop sample bank
once $ s "looper" # lname "bubu"

d1 $ juxBy 0.5 rev $ fast "1%4" $ s "bubu" # distort 0.3

-- To reset all loop buffers just evaluate
once $ s "freeLoops"

--To persist all loop buffers of a specific buffer list just evaluate
once $ s "persistLoops" # lname "bubu"

{-
Note 1: I prefer to use 'qtrigger 1' to ensure,
  that the recording starts from the beginning of the pattern.
  Maybe you want to use the looper with seqP, seqPLoop or wait.

Note 2: If you want to use more samples under one name,
  than adjust the numBuffers in the Looper.scd.
-}

{- REPLACE MODE
  In replace mode, each time the recording pattern is called,
  the specified buffer is recreated and any existing buffer is cleared.
  The basic looper s $ "looper" is actually
  the "rlooper" (for replace looper) and just a synonym.
-}
-- To continuously play back and record a loop, the code could looks like this
d1 $ qtrigger 1 $ stack [
    s "rlooper" # n "<0 1 2 3>",
    s "loop" # n "[0,1,2,3]"
    -- s "808 cp!3"
]
-- If you record a loop of cycle length 1 and play it back at the same time,
-- you will never hear a result,
-- because the buffer is immediately rewritten at each cycle.

-- Note: You can change the default looper mode
-- by changing the variable pLevel in the Looper.scd.

{- OVERDUB MODE
  Loop overdub - A mode found in many looping devices where new material
  can be added on top of — overdubbed on — existing loop material.
  This allows you to layer additional parts into a loop to create a fuller sound
  or a more “layered” effect. (See https://www.sweetwater.com/insync/loop-overdub/)

  In overdub mode, each time the recording pattern is called,
  the specified buffer is kept and the incoming audio signal
  is mixed to the existing one. This means that no new buffer is created
  if a recording has already been made for that buffer. To use the looper
  in overdub mode you just need to use olooper
  (for overdub looper) instead of looper.
-}

-- To continuously play back and record a loop, the code could looks like this
d1 $ fast 2 $ qtrigger 1 $ stack [s "olooper",s "loop"]

{-
  Note 1: The buffer length of a buffer is set when recording for the first time
  and cannot be changed afterwards (unless you clear the buffer with s "freeLoops") .

  Note 2: In an older version the additional function playAll was
  needed to simulate an overdub mode. This is no longer necessary
  because a "real" overdub mode was implemented.
-}
