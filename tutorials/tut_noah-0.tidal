-- VARIABLES --
-- 1 --
--  evaluate once, then can use anywhere
-- (white space matters!)
let hp = 3000
    lp = 1000

-- alternative spacing:
let 
  hp = 3000
  lp = 100

d1
$ s "bd*4"
# lpf lp
# lpq 0.3

d2
$ s "sd*3"
# hpf hp
# hpq 0.3


-- 2 --
--  these can be patterns
let hp = "{6500 20 40}%4"
    lp = "{9041 100}%5"

d1
$ s "bd*4"
# lpf lp
# lpq 0.3

d2
$ s "sd*3"
# hpf hp
# hpq 0.3

-- 3 --
--  but you have to go back and reevaluate the let statements
--  workaround 1: use in
--  in creates a local variable, and lets you declare variables and run your d patterns in one evaluation
let bp = "{9500 400 1000 6500 200}%3"
    lp = "{200 100 300 500 50}%4"
in
d1
$ s "bd*4"
# lpf lp
# lpq 0.4

--  but these local variables don't apply to other code blocks! so we get error
--  (I use 'bp' here since we defined 'hp' earlier)
d2
$ s "sd*3"
# bpf bp
# bpq 2

-- 4 -- 
--  workaround 2: do
--  (again, whitespace matters)
do
  let bp = "{9500 400 1000 6500 200}%3"
      lp = "{200 100 300 500 50}%4"
  d1
    $ s "bd*4"
    # lpf lp
    # lpq 0.4
  d2
    $ s "sd*3"
    # bpf bp
    # bpq 6

-- 6 --
--  workaround 3: in + stack
let bp = "{9500 400 1000 6500 200}%3"
    lp = "{200 100 300 500 50}%4"
in
d1
$ stack [id -- id is a 'do nothing' function
  $ s "bd*4"
  # lpf lp
  # lpq 0.4
  , id
  $ s "sd*3"
  # bpf bp
  # bpq 6
] 
-- stack lets you apply the same audio effects group to different patterns
# coarse 8
# room 0.2
# sz 0.9
# speed "<2 1> 0.5"


-- ALL --
--  applies to all patterns
d2
$ s "[hh hh]*3"
# legato 0.5


all $ (# djf 0.4)
-- (I think you may notice the djf effect comes 'before' the reverb.. so reverb is one of those global effect if I'm not mistaken)

