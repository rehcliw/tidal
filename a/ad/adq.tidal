{-
load: test, sawpluck, donk
-}

let width = pF "width"
in
d1
$ juxBy 0.5 (rev . (|+ n "<0!7 7!3 -7!3>"))
$ stutWith "{1 2 1 3 0}%4" "<0!7 e>" ((|+ n "<-14 7>") . palindrome . fast "1%2 1")
-- $ degradeBy 0.1
$ n "0(<9 11>,16)"
# s "test"
-- # fastTake "b" [1,2,0.5]
# nTake "a" [0,7,14,2,-7]
-- |+ n "{2 -12 4 0 -7}%2"
# width "{0.9 0.1 0.5}%16"
# djf "0.5*16"
# djfTake "b" [0.3,0.7,0.5,0.4]
# legatoTake "c" [0.5,1,1.5,3,2]
# panTake "d" [0.1,0.9,0.5]
-- # crush "1*3"
-- # crushTake "i" [16,8,3,16]
# distortTake "e" [0,0.2,0.6]
# sTake "f" ["sinosc","donk","supergong","super808"]
-- # room 0
# roomTake "g" [0,0.2,0,0.5,0]
# sizeTake "h" [0,0.6,0.2]
-- # voiceTake "i" [0,0.5,0.2,0,0.8,0]
-- # attack 0.1
-- # beginTake "e" [0,0.2,0,0.5]
-- # endTake "f" [0.7,1,0.9]

d1 $ s "test*4" # begin 0.5 # end 0.6
